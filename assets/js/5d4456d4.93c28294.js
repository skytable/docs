"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[50525],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,k=d["".concat(o,".").concat(c)]||d[c]||m[c]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},71690:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=["components"],p={id:"terrapipe",title:"Terrapipe 0.3.1"},o=void 0,s={unversionedId:"terrapipe",id:"version-0.3.2/terrapipe",isDocsHomePage:!1,title:"Terrapipe 0.3.1",description:"Date: 6th Aug, 2020",source:"@site/versioned_docs/version-0.3.2/5.terrapipe.md",sourceDirName:".",slug:"/terrapipe",permalink:"/0.3.2/terrapipe",tags:[],version:"0.3.2",sidebarPosition:5,frontMatter:{id:"terrapipe",title:"Terrapipe 0.3.1"},sidebar:"version-0.3.2/docs",previous:{title:"Building from source",permalink:"/0.3.2/building-from-source"}},u=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Concepts",id:"concepts",children:[],level:2},{value:"Supported actions",id:"supported-actions",children:[],level:2},{value:"Response codes",id:"response-codes",children:[],level:2},{value:"Types of query/response packets",id:"types-of-queryresponse-packets",children:[],level:2},{value:"Simple Query Packet",id:"simple-query-packet",children:[{value:"Simple Query Metaframe (SQM)",id:"simple-query-metaframe-sqm",children:[],level:3},{value:"Line 1: Metaframe <em>metaline</em>",id:"line-1-metaframe-metaline",children:[{value:"Example metaline",id:"example-metaline",children:[],level:4}],level:3},{value:"Line 2: Metaframe <em>metalayout</em>",id:"line-2-metaframe-metalayout",children:[{value:"Example metalayout",id:"example-metalayout",children:[],level:4}],level:3},{value:"Line 3 (and subsequent lines): Dataframe",id:"line-3-and-subsequent-lines-dataframe",children:[],level:3}],level:2},{value:"Simple Response Packet",id:"simple-response-packet",children:[],level:2},{value:"Pipeline Query Packet",id:"pipeline-query-packet",children:[],level:2},{value:"Pipeline Response Packet",id:"pipeline-response-packet",children:[],level:2},{value:"A note on types",id:"a-note-on-types",children:[{value:"Array responses",id:"array-responses",children:[],level:3}],level:2},{value:"A complete example",id:"a-complete-example",children:[{value:"Simple Query/Response",id:"simple-queryresponse",children:[],level:3},{value:"Pipelined Query/Response",id:"pipelined-queryresponse",children:[],level:3}],level:2}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"About this document")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("strong",{parentName:"p"},"Date:")," 6",(0,l.kt)("sup",null,"th")," Aug, 2020",(0,l.kt)("br",{parentName:"p"}),"\n","Copyright ","\xa9"," 2020 Sayan Nandan"))),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Terrapipe is an application layer protocol like HTTP, built on top of TCP. It is used by the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/terrabasedb/terrabase"},"Terrabase Database")," for client-server communication. All clients willing to communicate with the Terrabase Database must implement this protocol. This document serves as a guide to implement the protocol."),(0,l.kt)("h2",{id:"concepts"},"Concepts"),(0,l.kt)("p",null,"Terrapipe works in a query/response action similar to HTTP's request/response action. Clients send queries and the bytes sent over the TCP stream is collectively called the query packet. The server responds with a response packet."),(0,l.kt)("p",null,"Both these packets have two frames:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Lines 1 and 2 (Metaframe):",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The first line (before the first LF) in any of these packets is called the ",(0,l.kt)("em",{parentName:"li"},"metaline")," - this contains query/response metadata such as the action type and content length."),(0,l.kt)("li",{parentName:"ul"},"The second line (before the second LF) is also a part of the metaframe, and it is called the ",(0,l.kt)("em",{parentName:"li"},"metalayout")))),(0,l.kt)("li",{parentName:"ul"},"Line 3 and the subsequent lines are collectively called the dataframe"),(0,l.kt)("li",{parentName:"ul"},"Each chunk of bytes following the metaframe is terminated with ",(0,l.kt)("inlineCode",{parentName:"li"},"\\n")," i.e with LF")),(0,l.kt)("h2",{id:"supported-actions"},"Supported actions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GET")," : A get query"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SET")," : A set query"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"UPDATE")," : An update query"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DEL")," : A delete query"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"HEYA")," : A status check query")),(0,l.kt)("p",null,"(The number of commands will continue to increase in the future)"),(0,l.kt)("h2",{id:"response-codes"},"Response codes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Code"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"0")),(0,l.kt)("td",{parentName:"tr",align:null},"Okay"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"1")),(0,l.kt)("td",{parentName:"tr",align:null},"Not Found"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"2")),(0,l.kt)("td",{parentName:"tr",align:null},"Overwrite Error"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"3")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid Metaframe"),(0,l.kt)("td",{parentName:"tr",align:null},"The metaframe has an illegal format")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"4")),(0,l.kt)("td",{parentName:"tr",align:null},"Incomplete"),(0,l.kt)("td",{parentName:"tr",align:null},"The query packet is incomplete")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"5")),(0,l.kt)("td",{parentName:"tr",align:null},"Server Error"),(0,l.kt)("td",{parentName:"tr",align:null},"An error occurred on the server side")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"6")),(0,l.kt)("td",{parentName:"tr",align:null},"Other error"),(0,l.kt)("td",{parentName:"tr",align:null},"Some other error response. This error text would be sent in the dataframe")))),(0,l.kt)("h2",{id:"types-of-queryresponse-packets"},"Types of query/response packets"),(0,l.kt)("p",null,"Queries are of two kinds:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Simple Query Packets - These queries will usually do just one thing. that is one action at a time"),(0,l.kt)("li",{parentName:"ul"},"Pipeline Query Packets - These queries are a combination of multiple individual queries")),(0,l.kt)("h2",{id:"simple-query-packet"},"Simple Query Packet"),(0,l.kt)("h3",{id:"simple-query-metaframe-sqm"},"Simple Query Metaframe (SQM)"),(0,l.kt)("p",null,"This is what a typical SQM looks like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"<METALINE>\n<METALAYOUT>\n")),(0,l.kt)("h3",{id:"line-1-metaframe-metaline"},"Line 1: Metaframe ",(0,l.kt)("em",{parentName:"h3"},"metaline")),(0,l.kt)("p",null,"The metaline has the following general structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"*!<CLENGTH>!<ML_LENGTH>\n")),(0,l.kt)("p",null,"Where:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"CLENGTH")," - This is the total content length excluding the ",(0,l.kt)("em",{parentName:"li"},"metalayout")," line"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ML_LENGTH")," - This is the length of the ",(0,l.kt)("em",{parentName:"li"},"metalayout")," line")),(0,l.kt)("h4",{id:"example-metaline"},"Example metaline"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"*!22!12\n")),(0,l.kt)("h3",{id:"line-2-metaframe-metalayout"},"Line 2: Metaframe ",(0,l.kt)("em",{parentName:"h3"},"metalayout")),(0,l.kt)("p",null,"The metalayout is kind of like the ",(0,l.kt)("em",{parentName:"p"},"skip sequence")," which determines how many bytes are to be read from each partition preceding a ",(0,l.kt)("inlineCode",{parentName:"p"},"\\n")," . The metalayout has the following general structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"#<l1_len>#<l2_len>#<l3_len>#<ln_len>\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"<l1_len>")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"<l2_len>")," and so on are the number of data bytes in each line in the dataframe, exclusive of the LF ('\\n') byte."),(0,l.kt)("h4",{id:"example-metalayout"},"Example metalayout"),(0,l.kt)("p",null,"For a dataframe which looks like: ",(0,l.kt)("inlineCode",{parentName:"p"},"set\\nsayan\\n17")," , the corresponding metalayout should be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"#3#5#2\n")),(0,l.kt)("h3",{id:"line-3-and-subsequent-lines-dataframe"},"Line 3 (and subsequent lines): Dataframe"),(0,l.kt)("p",null,"The dataframe, well, contains data! It has the following general structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"set\\nsayan\\n17\n")),(0,l.kt)("p",null,"Every piece of data is separated by ",(0,l.kt)("inlineCode",{parentName:"p"},"\\n")," . Do note: this wouldn't cause any issues if a piece of data contains a newline byte as a part of it, since the metalayout defines the skip sequence. ",(0,l.kt)("strong",{parentName:"p"},"Please read the ",(0,l.kt)("a",{parentName:"strong",href:"#a-note-on-types"},"note on types"))),(0,l.kt)("h2",{id:"simple-response-packet"},"Simple Response Packet"),(0,l.kt)("p",null,"Simple responses have the following general structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"*!<RESPCODE>!<CLENGTH>!<ML_LENGTH>\n<METALAYOUT>\n<DATAFRAME>\n")),(0,l.kt)("p",null,"Where:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RESPOCDE")," - This can have any of the values ",(0,l.kt)("a",{parentName:"li",href:"#response-codes"},"listed here")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"CLENGTH")," - This is the total content length excluding the ",(0,l.kt)("em",{parentName:"li"},"metalayout")," line"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ML_LENGTH")," - This is the length of the ",(0,l.kt)("em",{parentName:"li"},"metalayout")," line"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"METALAYOUT")," - This has the same structure as the ",(0,l.kt)("a",{parentName:"li",href:"#line-2-metaframe-metalayout"},"query packet's metalayout")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DATAFRAME")," - This has the same structure as the ",(0,l.kt)("a",{parentName:"li",href:"#line-3-and-subsequent-lines-dataframe"},"query packet's dataframe"))),(0,l.kt)("h2",{id:"pipeline-query-packet"},"Pipeline Query Packet"),(0,l.kt)("p",null,"Pipeline queries are not very different from simple queries, except for the metaline in the metaframe.\nPipeline query packets have the following general structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$!<CLENGTH>!<ML_LENGTH>\n<METALAYOUT>\n<DATAFRAME>\n")),(0,l.kt)("p",null,"If you may have noticed, the only difference here, is that, instead of the asterisk (*), you have a Dollar Sign ($). All the other fields have the same meaning as in the ",(0,l.kt)("a",{parentName:"p",href:"#simple-query-packet"},"simple query packet")),(0,l.kt)("h2",{id:"pipeline-response-packet"},"Pipeline Response Packet"),(0,l.kt)("p",null,"Again, pipeline responses are not much different from simple responses, except for having a Dollar Sign ($), in place of the asterisk (*) in the metaline, in the metaframe.\nIt has the following general structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$!<RESPCODE>!<CLENGTH>!<ML_LENGTH>\n<METALAYOUT>\n<DATAFRAME>\n")),(0,l.kt)("p",null,"Where the values in ",(0,l.kt)("inlineCode",{parentName:"p"},"<>")," have their usual meanings."),(0,l.kt)("h2",{id:"a-note-on-types"},"A note on types"),(0,l.kt)("p",null,"The server doesn't care much about types when queries are sent, but when  pipelined queries are run, the server acts a little differently. This is because each query in a pipelined query will give different outcomes - some of them may return\nresponse codes, some of them may return arrays and some of them may return ",(0,l.kt)("em",{parentName:"p"},"untyped")," things - since most responses are typically sent as strings, and it is the client's/user's responsibility to parse it into the required types.\nThe server will respond in the following formats, for pipelined queries:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Most values - ",(0,l.kt)("inlineCode",{parentName:"li"},"+<value>")," is returned for most successful returns"),(0,l.kt)("li",{parentName:"ul"},"Response codes - ",(0,l.kt)("inlineCode",{parentName:"li"},"!<respcode>")," is returned if the query returns a response code"),(0,l.kt)("li",{parentName:"ul"},"Arrays - ",(0,l.kt)("a",{parentName:"li",href:"#array-responses"},"the usual way"))),(0,l.kt)("h3",{id:"array-responses"},"Array responses"),(0,l.kt)("p",null,"Array responses are actually pretty simple! They look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"&<n>element1\\n\nelement2\\n\n...\nelementn\\n\n")),(0,l.kt)("p",null,"where ",(0,l.kt)("inlineCode",{parentName:"p"},"<n>")," is the number of elements in the array."),(0,l.kt)("h2",{id:"a-complete-example"},"A complete example"),(0,l.kt)("h3",{id:"simple-queryresponse"},"Simple Query/Response"),(0,l.kt)("p",null,"Here, we will assume that all operations are legal, that is while creating new keys, we will assume that the keys didn't exist, that is, there will be no ",(0,l.kt)("inlineCode",{parentName:"p"},"Overwrite Error")," ."),(0,l.kt)("p",null,"This is the query I run on ",(0,l.kt)("inlineCode",{parentName:"p"},"tsh")," :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"tsh> set sayan 17\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"tsh")," will send bytes like the following (excluding TCP's SYN/SYN ACK/ACK):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"*!13!7\\n#3#5#2\\nSET\\nsayan\\n17\\n\n")),(0,l.kt)("p",null,"The server does the action and writes the following back to the TCP stream:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"*!0!0!0\n")),(0,l.kt)("p",null,"This is basically a success message, ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," since it is a simple response, ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," for ",(0,l.kt)("inlineCode",{parentName:"p"},"RESPCODE")," , since the action was successful, ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," s for ",(0,l.kt)("inlineCode",{parentName:"p"},"CLENGTH")," , and ",(0,l.kt)("inlineCode",{parentName:"p"},"ML_LENGTH")," since no data is returned."),(0,l.kt)("h3",{id:"pipelined-queryresponse"},"Pipelined Query/Response"),(0,l.kt)("p",null,"Since we don't have any way to run a pipeline query from ",(0,l.kt)("inlineCode",{parentName:"p"},"tsh")," (at the moment), we will assume that the pipeline query wants to do the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SET sayan 17")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GET foo")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"HEYA"),"\nThen, the client will send a query packet like:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$!25!12\\n#3#5#2#3#3#4\\nSET\\nsayan\\n17\\nGET\\nfoo\\nHEYA\n")),(0,l.kt)("p",null,"Then, the server will respond like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$!15!6\\n#2#6#5\\n!0\\n+Hello\\n+HEY!\n")),(0,l.kt)("p",null,"Voila! We just saw terrapipe in action. Phew, we're done!"))}d.isMDXComponent=!0}}]);