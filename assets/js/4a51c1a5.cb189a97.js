(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[418],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return y}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(n),y=r,k=m["".concat(p,".").concat(y)]||m[y]||u[y]||l;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4358:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var a=n(22122),r=n(19756),l=(n(67294),n(3905)),i={id:"data-types",title:"Data Types"},o=void 0,p={unversionedId:"protocol/data-types",id:"protocol/data-types",isDocsHomePage:!1,title:"Data Types",description:"This table lists all data types supported by Skytable and their corresponding",source:"@site/docs/protocol/data-types.md",sourceDirName:"protocol",slug:"/protocol/data-types",permalink:"/next/protocol/data-types",version:"current",frontMatter:{id:"data-types",title:"Data Types"},sidebar:"docs",previous:{title:"Skyhash Protocol 1.0",permalink:"/next/protocol/skyhash"},next:{title:"Response Codes",permalink:"/next/protocol/response-codes"}},s=[{value:"Simple types",id:"simple-types",children:[{value:"Example",id:"example",children:[]},{value:"Table",id:"table",children:[]}]},{value:"Compound types",id:"compound-types",children:[{value:"Table",id:"table-1",children:[]},{value:"Array",id:"array",children:[]},{value:"Flat array",id:"flat-array",children:[]},{value:"Typed array",id:"typed-array",children:[]}]}],d={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This table lists all data types supported by Skytable and their corresponding\ntype symbols ( ",(0,l.kt)("inlineCode",{parentName:"p"},"tsymbol")," s) and additional information."),(0,l.kt)("h2",{id:"simple-types"},"Simple types"),(0,l.kt)("p",null,"Simple types only contain one type. This makes them very simple to serialize/deserialize. All simple types have the\nfollowing layout:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"<tsymbol><number of bytes>\\n\n<element>\n")),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"For an unicode string 'sayan', the layout of the unicode string type (",(0,l.kt)("inlineCode",{parentName:"p"},"+"),") will look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"+5\\n    # 'sayan' is an unicode string, so '+' and has 5 bytes so '5'\nsayan\\n # the element 'sayan' itself\n")),(0,l.kt)("h3",{id:"table"},"Table"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type symbol (tsymbol)"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Additional notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"+"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"a string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"!"),(0,l.kt)("td",{parentName:"tr",align:null},"Response Code"),(0,l.kt)("td",{parentName:"tr",align:null},"a response code")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"$"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON"),(0,l.kt)("td",{parentName:"tr",align:null},"a ",(0,l.kt)("inlineCode",{parentName:"td"},"JSON")," value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"."),(0,l.kt)("td",{parentName:"tr",align:null},"smallint"),(0,l.kt)("td",{parentName:"tr",align:null},"An integer in the range: ","[0, 255]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"smallint signed"),(0,l.kt)("td",{parentName:"tr",align:null},"An integer in the range: ","[-128, 127]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},":"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"An integer in the range: ","[0, 4,294,967,295]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},";"),(0,l.kt)("td",{parentName:"tr",align:null},"int signed"),(0,l.kt)("td",{parentName:"tr",align:null},"An integer in the range: ","[-2,147,483,647, 2,147,483,647]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"%"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"A 32-bit floating point value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"?"),(0,l.kt)("td",{parentName:"tr",align:null},"binary string"),(0,l.kt)("td",{parentName:"tr",align:null},"the next line contains binary data (often called a blob)")))),(0,l.kt)("p",null,"Do keep the matching for this symbol ",(0,l.kt)("em",{parentName:"p"},"non-exhaustive")," since we might add more types in future revisions of the protocol."),(0,l.kt)("h2",{id:"compound-types"},"Compound types"),(0,l.kt)("p",null,"Compound types are derived types -- they are based on simple types, but often with\nsome additional properties (and serialization/deserialization differences)."),(0,l.kt)("h3",{id:"table-1"},"Table"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type symbol (tsymbol)"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Additional notes"),(0,l.kt)("th",{parentName:"tr",align:null},"Protocol"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"&"),(0,l.kt)("td",{parentName:"tr",align:null},"Array"),(0,l.kt)("td",{parentName:"tr",align:null},"A recursive array"),(0,l.kt)("td",{parentName:"tr",align:null},"1.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_"),(0,l.kt)("td",{parentName:"tr",align:null},"Flat array"),(0,l.kt)("td",{parentName:"tr",align:null},"A non-recursive array"),(0,l.kt)("td",{parentName:"tr",align:null},"1.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@"),(0,l.kt)("td",{parentName:"tr",align:null},"Typed array"),(0,l.kt)("td",{parentName:"tr",align:null},"An array of a specific type"),(0,l.kt)("td",{parentName:"tr",align:null},"1.1")))),(0,l.kt)("h3",{id:"array"},"Array"),(0,l.kt)("p",null,"See the full discussion on arrays ",(0,l.kt)("a",{parentName:"p",href:"skyhash#arrays-"},"here"),"."),(0,l.kt)("h3",{id:"flat-array"},"Flat array"),(0,l.kt)("p",null,"A flat array is like an array, but with the exception that it is non-recursive. This\nmeans that a flat array can contain all types except other compound types (hence the\nname 'flat')."),(0,l.kt)("p",null,"So if you represent an array in a programming language like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'["hello", 12345, "world"];\n')),(0,l.kt)("p",null,"then it will be serialized by Skyhash into:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"_3\\n    # 3 elements\n+5\\n    # 'hello' is an unicode string, so '+' and has 5 bytes\nhello\\n # the element 'hello' itself\n:5\\n    # 12345 has 5 bytes and is an unsigned int\n12345\\n # the element 12345 itself\n+5\\n    # 'world' is an unicode string, so '+' and has 5 bytes\n")),(0,l.kt)("h3",{id:"typed-array"},"Typed array"),(0,l.kt)("p",null,"A typed array is like a flat array, but with the exception that it can only hold\ntwo types: either a ",(0,l.kt)("a",{parentName:"p",href:"#simple-types"},"simple type")," or a ",(0,l.kt)("inlineCode",{parentName:"p"},"NUL"),". You can think to it\nbe like: there is either an element of one type -- or there is no element. Since\nthis array just has one type -- unlike flat arrays, they don't have any tsymbol\nfor every element."),(0,l.kt)("p",null,"Say a programming language represents an array like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'["omg", NULL, "happened"]\n')),(0,l.kt)("p",null,"then it will be serialized by Skyhash into:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"@+3\\n\n3\\n\nomg\n\\0\\n\n8\\n\nhappened\n")),(0,l.kt)("p",null,"Line-by-line explanation:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@+3\\n")," because it is a typed array, so ",(0,l.kt)("inlineCode",{parentName:"li"},"@"),", the elements are unicode strings, so ",(0,l.kt)("inlineCode",{parentName:"li"},"+"),"\nand there are three elements, so ",(0,l.kt)("inlineCode",{parentName:"li"},"3")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"3\\n")," because 'omg' has 3 bytes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"omg"),", the element itself"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"\\0\\n"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," because there was no element",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"Here ",(0,l.kt)("inlineCode",{parentName:"p"},"\\0")," corresponds to the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Null_character"},"null terminator")," (integer value of ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),")"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"8\\n")," because 'happened' has 8 bytes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"happened"),", the element itself")))}u.isMDXComponent=!0}}]);