"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4781],{4766:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var n=t(5893),a=t(1151);const s={id:"architecture",title:"Architecture"},o=void 0,r={id:"architecture",title:"Architecture",description:"Skytable is a modern NoSQL database that prioritises performance, scalability and reliability while providing a rich and powerful querying interface. We are generally targetting an audience that wants to build high performance, large-scale, low latency applications, such as social networking services, auth services, adtech and such. Skytable is designed to work with",source:"@site/docs/4.architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/architecture",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"architecture",title:"Architecture"},sidebar:"docs",previous:{title:"Using the REPL",permalink:"/using-the-repl"},next:{title:"BlueQL",permalink:"/category/blueql"}},l={},c=[{value:"Data model",id:"data-model",level:2},{value:"A <code>space</code> is like a <code>database</code>",id:"a-space-is-like-a-database",level:3},{value:"A <code>model</code> is like a <code>table</code>",id:"a-model-is-like-a-table",level:3},{value:"Query language",id:"query-language",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Storage",id:"storage",level:2},{value:"Scalability",id:"scalability",level:2},{value:"Networking",id:"networking",level:2},{value:"Backwards compatibility",id:"backwards-compatibility",level:2}];function d(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:["Skytable is a modern NoSQL database that prioritises performance, scalability and reliability while providing a rich and powerful querying interface. We are generally targetting an audience that wants to build high performance, large-scale, low latency applications, such as social networking services, auth services, adtech and such. Skytable is designed to work with\nboth ",(0,n.jsx)(i.strong,{children:"structured and semi-structured data"}),"."]}),"\n",(0,n.jsx)(i.p,{children:"Our goal is to provide you with a powerful and solid foundation for your application with no gimmicks \u2014 just a solid core.\nThat's why, every component in Skytable has been engineered from the ground up, from scratch."}),"\n",(0,n.jsx)(i.p,{children:"And all of that, without you having to be an expert, and with the least maintenance that you can expect."}),"\n",(0,n.jsx)(i.h2,{id:"data-model",children:"Data model"}),"\n",(0,n.jsxs)(i.p,{children:["Just like SQL has ",(0,n.jsx)(i.code,{children:"DATABASE"}),"s, Skytable has ",(0,n.jsx)(i.code,{children:"SPACE"}),"s which are collections of what we call data containers like tables.\nIn Skytable lingo, we don't call them tables but call them ",(0,n.jsx)(i.code,{children:"MODEL"}),"s which enable you to ",(0,n.jsx)(i.em,{children:"define your data model"}),"."]}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.p,{children:["While a ",(0,n.jsx)(i.code,{children:"MODEL"})," is the only data container for now, many more are set to come. Now is a good time to ",(0,n.jsx)(i.a,{href:"https://discord.gg/QptWFdx",children:"join our discord server"})," where you can directly chat with the developers working on Skytable and all our awesome community members."]})}),"\n",(0,n.jsxs)(i.h3,{id:"a-space-is-like-a-database",children:["A ",(0,n.jsx)(i.code,{children:"space"})," is like a ",(0,n.jsx)(i.code,{children:"database"})]}),"\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.code,{children:"space"})," in Skytable is a collection of ",(0,n.jsx)(i.code,{children:"model"}),"s and other objects, and settings. It is different from a traditional SQL\nDatabase (that is created with SQL's ",(0,n.jsx)(i.code,{children:"CREATE DATABASE"}),") because it is not meant for tables only, but many other things."]}),"\n",(0,n.jsxs)(i.p,{children:['Spaces have "space local" settings that can be set for the space (and will be respected by all its ',(0,n.jsx)(i.code,{children:"models"})," and other items). You'll learn more about this in the section on DDL."]}),"\n",(0,n.jsxs)(i.h3,{id:"a-model-is-like-a-table",children:["A ",(0,n.jsx)(i.code,{children:"model"})," is like a ",(0,n.jsx)(i.code,{children:"table"})]}),"\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.code,{children:"model"})," in Skytable is like a ",(0,n.jsx)(i.code,{children:"table"})," in SQL but is vastly different because of certain concepts such as:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"DML queries are point and not range queries by default"}),"\n",(0,n.jsx)(i.li,{children:"Restrictions on indexes"}),"\n",(0,n.jsxs)(i.li,{children:["Settings (which can't be created in traditional ",(0,n.jsx)(i.code,{children:"table"}),"s)"]}),"\n",(0,n.jsx)(i.li,{children:"Semi-structured data: with collection types in columns such as lists and dictionaries that violates some of the ideas of\ntraditional schema enforcement"}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"query-language",children:"Query language"}),"\n",(0,n.jsxs)(i.p,{children:["Skytable has it's own query language BlueQL",(0,n.jsx)("sup",{children:"TM"})," which takes a lot of inspiration from SQL but makes several different (and sometimes vastly different) design choices, focused on clarity, speed, simplicity and most importantly, security."]}),"\n",(0,n.jsxs)(i.p,{children:["For example, Skytable's BlueQL",(0,n.jsx)("sup",{children:"TM"})," ",(0,n.jsx)(i.em,{children:"only"})," allows the parameterization of queries. All the queries you ran previously with strings and numbers directly were only possible because the REPL client smartly does the paramterization behind the scenes. This is done for security. You'll learn more about BlueQL next."]}),"\n",(0,n.jsx)(i.h2,{id:"transactions",children:"Transactions"}),"\n",(0,n.jsx)(i.p,{children:"Skytable's DDL and DCL queries are all ACID transactions. However, DML queries use an AOF-style storage driver that periodically\nrecords, analyses and then intelligently syncs the changes to disk. We're working on making ACID transactions widely available\nacross DML queries as well."}),"\n",(0,n.jsx)(i.h2,{id:"storage",children:"Storage"}),"\n",(0,n.jsx)(i.p,{children:"Skytable's storage engine is collectively called the Skytable Disk Storage Subsystem or SDSS for short. The storage engine uses\nseveral different storage drivers, using ones appropriate for the task. We do not use RocksDB or any other engine but we\nimplement everything in house, engineering them piece by piece."}),"\n",(0,n.jsx)(i.admonition,{title:"Features on track",type:"info",children:(0,n.jsxs)(i.p,{children:["At this point, Skytable is primarily in-memory which means that while it uses disk storage for durability, most data is stored in-memory. ",(0,n.jsx)(i.strong,{children:"This is going to change in the near future as the team is working on building a custom log-based engine."})," As you might understand, this is not an everyday task and as we incorporate new ideas it will take some time. But if you're seeing this in 2023, you can expect us to ship something by Q1 2024."]})}),"\n",(0,n.jsx)(i.p,{children:"DDL and DCL transactions use a log-based append-only driver while DML queries use a custom log-based append-only driver that is able to intelligently handle concurrent changes. The team will implement new and updated storage drivers from time to time but you do not have to worry about anything, due to our promise for backwards compatibility (see below)."}),"\n",(0,n.jsx)(i.h2,{id:"scalability",children:"Scalability"}),"\n",(0,n.jsx)(i.p,{children:"Skytable is heavily multithreaded enabling incredible vertical scalability and you can witness it for yourself by running benchmarks (or looking at ones that we publish). Clustering and replication are on track to be released soon."}),"\n",(0,n.jsx)(i.admonition,{title:"Features on track",type:"info",children:(0,n.jsx)(i.p,{children:"Clustering (horizontal scalability) and replication (failover) is right on  track and we're also expecting to deliver this by Q1\n2024. We'd also like to note that clustering is too important a feature to ignore so you can be assured that we're hard at work\non it."})}),"\n",(0,n.jsx)(i.p,{children:"Skytable will use atleast as many threads as the number of logical CPUs present on the host. At this moment it is not possible to\nlimit multithreading because multithreading is a part of Skytable's design principles and every attempt is made to exploit\navailable CPU cores to the fullest."}),"\n",(0,n.jsx)(i.h2,{id:"networking",children:"Networking"}),"\n",(0,n.jsx)(i.p,{children:"Skytable its own in-house Skyhash protocol that is built on top of TCP enabling any programming language that has a TCP client to use it without issues. There are three phases in the connection:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Handshake: All auth data, compatibility information and other data is exchanged at this step"}),"\n",(0,n.jsx)(i.li,{children:"Connection mode selection: based on the handshake parameters a connection mode is chosen and the server responds with the chosen exchange mode"}),"\n",(0,n.jsx)(i.li,{children:"Data exchange: This is where the real querying happens"}),"\n",(0,n.jsxs)(i.li,{children:["Termination: there is no special step; just a ",(0,n.jsx)(i.code,{children:"TCP FIN"})]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"backwards-compatibility",children:"Backwards compatibility"}),"\n",(0,n.jsx)(i.p,{children:"We make the promise to you that no matter what changes in Skytable, you will always be able to:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Upgrade from one version to another without data loss or too many hoops"}),"\n",(0,n.jsx)(i.li,{children:"Export data from Skytable at any time"}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"More technically:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"For minor/patch releases"}),": The minor/patch is just in the name but it indicates that no data migration effort is needed. ",(0,n.jsx)(i.strong,{children:"No minor releases ever need data migration, and any migration is done automatically"})]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"For major releases"}),": Major releases generally introduce breaking changes (just like the upgrade from ",(0,n.jsx)(i.code,{children:"0.7.x"})," to ",(0,n.jsx)(i.code,{children:"0.8.0"})," is a largely breaking change). ",(0,n.jsx)(i.strong,{children:"Major releases will either automatically upgrade the data files or require you to use a migration tool that is shipped with the bundle"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:["Definitions (closely following semantic versioning):","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"A major release"})," is something like ",(0,n.jsx)(i.code,{children:"1.0.0"})," to ",(0,n.jsx)(i.code,{children:"2.0.0"})," or ",(0,n.jsx)(i.code,{children:"0.8.0"})," to ",(0,n.jsx)(i.code,{children:"0.9.0"})," (in development versions, 0.8.0 to 0.9.0 is a major version bump)"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"A minor release"})," is something like ",(0,n.jsx)(i.code,{children:"1.0.0"})," to ",(0,n.jsx)(i.code,{children:"1.1.0"})," or ",(0,n.jsx)(i.code,{children:"0.8.0"})," to ",(0,n.jsx)(i.code,{children:"0.8.1"})]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"A patch release"})," is something like ",(0,n.jsx)(i.code,{children:"1.0.0"})," to ",(0,n.jsx)(i.code,{children:"1.0.1"})," or ",(0,n.jsx)(i.code,{children:"0.8.0"})," to ",(0,n.jsx)(i.code,{children:"0.8.1"})," (note that in development versions there is no distinction between a minor and patch release)"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,i,t)=>{t.d(i,{Z:()=>r,a:()=>o});var n=t(7294);const a={},s=n.createContext(a);function o(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);