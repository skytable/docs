"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5972],{2281:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(5893),s=t(1151);const a={id:"perf-guide",title:"Performance Guide"},o=void 0,i={id:"perf-guide",title:"Performance Guide",description:"We have put in our best efforts to make Skytable really fast &mdash; but usage patterns can greatly",source:"@site/versioned_docs/version-0.7.4/13.perf-guide.md",sourceDirName:".",slug:"/perf-guide",permalink:"/0.7.4/perf-guide",draft:!1,unlisted:!1,tags:[],version:"0.7.4",sidebarPosition:13,frontMatter:{id:"perf-guide",title:"Performance Guide"},sidebar:"docs",previous:{title:"Client drivers",permalink:"/0.7.4/clients"},next:{title:"Benchmarking",permalink:"/0.7.4/benchmarking"}},c={},l=[];function d(e){const n={code:"code",em:"em",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["We have put in our best efforts to make Skytable really fast \u2014 but usage patterns can greatly\naffect how well Skytable performs for you, and how well you are able to exploit the ",(0,r.jsx)(n.em,{children:"on metal"}),"\nperformance that Skytable can provide. Here are some quick pointers to get maximum performance:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Try to have a lesser number of tables"})}),"\n",(0,r.jsxs)(n.p,{children:["The number of tables you can create is virtually\nunlimited, but however, creating a huge number of tables (say over 60,000) ",(0,r.jsx)(n.em,{children:"can"})," hurt performance."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Try to use default connection level containers"})}),"\n",(0,r.jsxs)(n.p,{children:["Although you are free to run actions by\nspecifying the table to use, it has a runtime cost because the table has to be looked up and errors\nneed to be handled. Instead, try using default containers wherever possible. For example, if you\nhave a table ",(0,r.jsx)(n.code,{children:"cakes"})," in a keyspace ",(0,r.jsx)(n.code,{children:"birthday"})," and your application will be using this table for\nthe most part, it's a good idea to run ",(0,r.jsx)(n.code,{children:"use birthday:cakes"})," after connecting and then using the\nactions without specifying a table (or keyspace). This avoids the lookup and error handling cost."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["If you know your data in keymap tables has valid unicode, try using the ",(0,r.jsx)(n.code,{children:"binstr"})," type instead.\nThis is because unicode validation adds a ",(0,r.jsx)(n.em,{children:"very small"})," runtime cost"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var r=t(7294);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);