"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[418],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),o=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},m=function(e){var t=o(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=o(n),y=r,k=u["".concat(i,".").concat(y)]||u[y]||d[y]||l;return n?a.createElement(k,p(p({ref:t},m),{},{components:n})):a.createElement(k,p({ref:t},m))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,p=new Array(l);p[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,p[1]=s;for(var o=2;o<l;o++)p[o]=n[o];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9685:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const l={id:"data-types",title:"Data types"},p=void 0,s={unversionedId:"protocol/data-types",id:"protocol/data-types",title:"Data types",description:"Skyhash has simple and compound types. In this document, we explore these types, their structure",source:"@site/docs/protocol/data-types.md",sourceDirName:"protocol",slug:"/protocol/data-types",permalink:"/next/protocol/data-types",draft:!1,tags:[],version:"current",frontMatter:{id:"data-types",title:"Data types"},sidebar:"docs",previous:{title:"Skyhash 2.0",permalink:"/next/protocol/skyhash"},next:{title:"Response Codes",permalink:"/next/protocol/response-codes"}},i={},o=[{value:"Simple types",id:"simple-types",level:2},{value:"String",id:"string",level:3},{value:"Binary",id:"binary",level:3},{value:"Status message",id:"status-message",level:3},{value:"Integer (64-bit)",id:"integer-64-bit",level:3},{value:"Float (32-bit)",id:"float-32-bit",level:3},{value:"Compound types",id:"compound-types",level:2},{value:"Typed array",id:"typed-array",level:3},{value:"Typed non-null array",id:"typed-non-null-array",level:3}],m={toc:o};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Skyhash has simple and compound types. In this document, we explore these types, their structure\nand how we can serialize/deserialize them. As noted earlier, as of Skyhash\n2.0 only responses are strongly typed. The server automatically determines an appropriate type for queries, so you do not need to send any type information."),(0,r.kt)("p",null,"All types which are currently reserved will be implemented in future iterations of Skyhash (non-breaking\nchanges like 2.x)."),(0,r.kt)("h2",{id:"simple-types"},"Simple types"),(0,r.kt)("p",null,"Simple types are like primitive types in programming languages, and hence are not collections.\nThis table presents a list of all the data types Skyhash supports (some are reserved) along with\ntheir corresponding type symbols and a brief description."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type symbol"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"+")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"An unicode string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"?")),(0,r.kt)("td",{parentName:"tr",align:null},"Binary"),(0,r.kt)("td",{parentName:"tr",align:null},"An arbitrary sequence of bytes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"!")),(0,r.kt)("td",{parentName:"tr",align:null},"Status message"),(0,r.kt)("td",{parentName:"tr",align:null},"A status message. Can be an 8-bit integer or a string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},".")," (reserved)"),(0,r.kt)("td",{parentName:"tr",align:null},"Integer (32-bit)"),(0,r.kt)("td",{parentName:"tr",align:null},"32-bit integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},":")),(0,r.kt)("td",{parentName:"tr",align:null},"Integer (64-bit)"),(0,r.kt)("td",{parentName:"tr",align:null},"64-bit integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"%")),(0,r.kt)("td",{parentName:"tr",align:null},"Float (32-bit)"),(0,r.kt)("td",{parentName:"tr",align:null},"32-bit floating point number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/")," (reserved)"),(0,r.kt)("td",{parentName:"tr",align:null},"Double (64-bit)"),(0,r.kt)("td",{parentName:"tr",align:null},"64-bit floating point number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"$")," (reserved)"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON"),(0,r.kt)("td",{parentName:"tr",align:null},"A JSON document")))),(0,r.kt)("p",null,"We'll now take a look at how the data types currently in use (not reserved) are structured and how your clients can deserialize responses\ncontaining such types."),(0,r.kt)("h3",{id:"string"},"String"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"+           # The type symbol\n<l>\\n       # The length terminated by an LF\n<element>   # The element itself\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,'Example for a string "sayan":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+5\\n\nsayan\n")),(0,r.kt)("h3",{id:"binary"},"Binary"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"?           # the type symbol\n<l>\\n       # length terminated by an LF\n<element>   # the element itself\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Example for a random byte sequence: ",(0,r.kt)("inlineCode",{parentName:"p"},"[0x41, 0x42, 0x43, 0x44, 0x45]"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"?5\\n\nABCDE\n")),(0,r.kt)("h3",{id:"status-message"},"Status message"),(0,r.kt)("p",null,"A status message is either an 8-bit integer or a string. When the response is an integer, it is a response\ncode (or respcode). If it is a string, then it is called a respstring. For languages that support\nenumerations, this can be lucidly represented."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"!           # The type symbol\n<message>\\n # The message terminated by an LF\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"An example of respcode 0 (okay):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"!0\\n\n")),(0,r.kt)("p",null,"An example respstring (snap-busy):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"!snapbusy\\n\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can find a full list of respcodes and respstrings ",(0,r.kt)("a",{parentName:"p",href:"response-codes"},"in this document"))),(0,r.kt)("h3",{id:"integer-64-bit"},"Integer (64-bit)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},":           # the type symbol\n<integer>\\n # the integer itself terminated by an LF\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"For an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"2003"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},":2003\\n\n")),(0,r.kt)("h3",{id:"float-32-bit"},"Float (32-bit)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"%           # the type symbol\n<float>\\n   # the float terminated by an LF\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"For a float ",(0,r.kt)("inlineCode",{parentName:"p"},"3.141592654"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"%3.141592654\\n\n")),(0,r.kt)("p",null,"For a float ",(0,r.kt)("inlineCode",{parentName:"p"},"100.00")," (see below). Note the truncation of the pointless decimal point; this is done to save bandwidth."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"%100\\n\n")),(0,r.kt)("h2",{id:"compound-types"},"Compound types"),(0,r.kt)("p",null,"Compound types are better called collections. Simply put, they are collections of simple types. The below table outlines the compound types\nsupported by Skyhash followed by descriptions of the structures of each\n(exclusive of reserved types)."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type symbol"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"&")," (reserved)"),(0,r.kt)("td",{parentName:"tr",align:null},"Multi-typed array"),(0,r.kt)("td",{parentName:"tr",align:null},"An array comprised of multiple-types, including itself (nested arrays)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_")," (reserved)"),(0,r.kt)("td",{parentName:"tr",align:null},"Flat array"),(0,r.kt)("td",{parentName:"tr",align:null},"An array made up of multiple types, excluding itself (a non-nested array)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@")),(0,r.kt)("td",{parentName:"tr",align:null},"Typed array"),(0,r.kt)("td",{parentName:"tr",align:null},"An array of a specific type, with nullable elements")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"^")),(0,r.kt)("td",{parentName:"tr",align:null},"Typed non-null array"),(0,r.kt)("td",{parentName:"tr",align:null},"An array of a specific type, without nullable elements")))),(0,r.kt)("h3",{id:"typed-array"},"Typed array"),(0,r.kt)("p",null,"The general structure of a typed array looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"@       # the type symbol for typed arrays\n<t>     # the type symbol for the elements\n<l>\\n   # the length of the array\n<data>  # data\n")),(0,r.kt)("p",null,"Whenever an element is null, instead of including ",(0,r.kt)("inlineCode",{parentName:"p"},"<length>\\n<payload>"),", the server simply returns\nASCII Code ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," or NULL: ",(0,r.kt)("inlineCode",{parentName:"p"},"\\0"),". For clients, you need to simply branch on whether the first byte of is\nNULL or not; if it is, attempt to parse the next element (if any); if it isn't attempt to parse the\nelement into the appropriate type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A typed array with two strings and a NULL:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'["sayan", "goes", NULL];\n')),(0,r.kt)("p",{parentName:"li"},"will be represented as:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"@+3\\n    # this typed array has elements of the string type\n5\\n      # the first element has 5 bytes\nsayan    # the first element\n4\\n      # the second element has 4 bytes\ngoes     # the second element\n\\0       # the third element is NULL\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A typed array which is supposed to have strings, but has all null elements:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"[NULL, NULL, NULL];\n")),(0,r.kt)("p",{parentName:"li"},"will be represented as:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"@+3\\n # this typed array has 3 string elements\n\\0    # the first element is NULL\n\\0    # the second element is also NULL\n\\0    # the third element is also NULL\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A typed array full of respstrings:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"@!5\\n # this typed array has 5 status message elements\n0\\n   # the first element has respcode 0\n1\\n   # the second element has respcode 1\n2\\n   # the third element has respcode 2\n3\\n   # the fourth element has respcode 3\n4\\n   # the fifth element has respcode 4\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A typed array full of integers (with two being NULL):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"@:5\\n    # this array has 5 integer elements\n12345\\n  # the first integer is 12345\n23456\\n  # the second integer is 23456\n34567\\n  # the third integer is 34567\n\\0       # the fourth integer is NULL\n\\0       # the fifth integer is also NULL\n")))),(0,r.kt)("h3",{id:"typed-non-null-array"},"Typed non-null array"),(0,r.kt)("p",null,"The general structure of a typed non-null array looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"^           # the type symbol for a typed non-null array\n<tsymbol>   # the type symbol for the elements\n<l>\\n       # the length of the array\n")),(0,r.kt)("p",null,"The structure of this array type is exactly the same as that of a typed array with one exception: it never contains\nnull elements."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A non-null array with four strings:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'["this", "can\'t", "be", "null"];\n')),(0,r.kt)("p",{parentName:"li"},"will be represented as:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"^+4\\n\n4\\n\nthis\n5\\n\ncan't\n2\\n\nbe\n4\\n\nnull\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A typed non-null array with five integers:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"[12345, 23456, 34567, 45678, 56789];\n")),(0,r.kt)("p",{parentName:"li"},"would be represented as:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"@:5\\n\n12345\\n\n23456\\n\n34567\\n\n45678\\n\n56789\\n\n")))))}d.isMDXComponent=!0}}]);