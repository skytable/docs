"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[284],{7597:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(4848),s=n(8453);const o={id:"limits",title:"Limits"},r=void 0,l={id:"limits",title:"Limits",description:"We've made every effort to provide a robust querying interface, but there are some temporary limitations that we think you",source:"@site/docs/16.limits.md",sourceDirName:".",slug:"/limits",permalink:"/limits",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{id:"limits",title:"Limits"},sidebar:"docs",previous:{title:"Deployment",permalink:"/deployment"}},a={},c=[{value:"Temporary limitations",id:"temporary-limitations",level:2},{value:"Soft limitations",id:"soft-limitations",level:2}];function d(e){const t={admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["We've made every effort to provide a robust querying interface, but there are some ",(0,i.jsx)(t.strong,{children:"temporary limitations"})," that we think you\nshould know about. We aim to remove the limitations over the next few releases which we expect should happen fairly quickly."]}),"\n",(0,i.jsx)(t.p,{children:"Skytable's limitations primarily come from a bunch of concerns:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Performance and scalability"}),": Most of our design decisions are influenced by concerns about performance. For example, it's very hard to efficiently scale multi-column indexes."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Reliability"}),": how reliable is the execution of the task? If it's like walking on eggshells, then we're not going to implement it (for example, unreliable distributed locking)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Security"}),": If it can't be run securely, then it's off our list"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"temporary-limitations",children:"Temporary limitations"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"DML in collections are still limited"}),": You'll be able to easily ",(0,i.jsx)(t.code,{children:"INSERT"})," data into any collections but the manipulations on them are currently limited.:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"SELECT"})," will return the entire collection and cannot yet return a single element"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"UPDATE"})," can append elements to ",(0,i.jsx)(t.em,{children:"non-nested"})," collections but can't do the same for nested collections"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"DELETE"})," can't remove individual elements"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsxs)(t.strong,{children:["Models cannot be ",(0,i.jsx)(t.code,{children:"volatile"})," yet"]}),". If you've used Skytable before, you'd know that you could previously create ",(0,i.jsx)(t.code,{children:"volatile"}),"\nmodels which were used as ",(0,i.jsx)(t.em,{children:"caching tables"})," as in they didn't persist data across restarts. The ",(0,i.jsx)(t.code,{children:"volatile"})," feature has been\ntemporarily removed because we're working on integrating it with the new storage engine."]}),"\n"]}),"\n",(0,i.jsxs)(t.admonition,{title:"Nested collections will get an upgrade",type:"tip",children:[(0,i.jsxs)(t.p,{children:["We understand that collections are fundamental to the complexity of today's data and hence we're working on this! The only reason our team spends so much time ",(0,i.jsx)(t.em,{children:"perfecting"})," features is because it has match our design philosophy."]}),(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"You can have 100 fancy but slow features, or 10 powerful and performant features."}),"\n"]}),(0,i.jsxs)(t.p,{children:["If it scales, we ship it. ",(0,i.jsx)(t.strong,{children:"We're on it!"})]})]}),"\n",(0,i.jsx)(t.h2,{id:"soft-limitations",children:"Soft limitations"}),"\n",(0,i.jsx)(t.p,{children:"Following Skytable's design philosophy that closely encompasses NoSQL systems, the following soft limitations are set:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Only one index"}),": Right now, the only index that you can use is the primary index (primary_key -> row). This is due to  concerns about performance and scale"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"No mass updates"}),": We consider mass updates, such as setting ",(0,i.jsx)(t.code,{children:"counter += 1"})," to every row in a model with multi-million rows\nto be very slow and bad for performance. Hence, we do not allow mass updates at this time."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(6540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);