"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[80639],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),k=s(a),d=r,c=k["".concat(p,".").concat(d)]||k[d]||u[d]||i;return a?n.createElement(c,l(l({ref:t},m),{},{components:a})):n.createElement(c,l({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},3099:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const i={id:"terrapipe",title:"Terrapipe 0.1"},l=void 0,o={unversionedId:"terrapipe",id:"version-0.1.0/terrapipe",title:"Terrapipe 0.1",description:"Date: 2nd July, 2020",source:"@site/versioned_docs/version-0.1.0/4.terrapipe.md",sourceDirName:".",slug:"/terrapipe",permalink:"/0.1.0/terrapipe",draft:!1,tags:[],version:"0.1.0",sidebarPosition:4,frontMatter:{id:"terrapipe",title:"Terrapipe 0.1"},sidebar:"version-0.1.0/docs",previous:{title:"Building from source",permalink:"/0.1.0/building-from-source"}},p={},s=[{value:"The <code>Q</code> uery packet",id:"the-q-uery-packet",level:2},{value:"Line 1: Meta frame",id:"line-1-meta-frame",level:3},{value:"Example meta frame",id:"example-meta-frame",level:4},{value:"Line 2: Line break",id:"line-2-line-break",level:3},{value:"Line 3: Data frame",id:"line-3-data-frame",level:3},{value:"The <code>R</code>esult packet",id:"the-result-packet",level:2},{value:"Line 1: Meta frame",id:"line-1-meta-frame-1",level:3},{value:"Example data frame",id:"example-data-frame",level:4},{value:"An example of a query/result",id:"an-example-of-a-queryresult",level:2},{value:"The <code>Q</code>uery packet",id:"the-query-packet",level:3},{value:"The <code>R</code>esult packet",id:"the-result-packet-1",level:3}],m={toc:s};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"About this document",type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Date:")," 2",(0,r.kt)("sup",null,"nd")," July, 2020",(0,r.kt)("br",{parentName:"p"}),"\n","Copyright ","\xa9"," 2020 Sayan Nandan")),(0,r.kt)("p",null,"Terrapipe is a protocol that is used by Terrabase for data transfer. It is an application layer\nprotocol that builds on top of TCP. Just like HTTP's request/response action, Terrapipe (i.e tp://)\nalso makes use of  a query/result action.\nFrom now on, I will refer to Terrapipe as ",(0,r.kt)("em",{parentName:"p"},"TP")," or ",(0,r.kt)("em",{parentName:"p"},"tp"),"."),(0,r.kt)("p",null,"TP makes use of two packets:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"strong"},"Q")," uery packet"),": This is sent by the client"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"strong"},"R")," esult packet"),": This is sent by the server")),(0,r.kt)("h2",{id:"the-q-uery-packet"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"Q")," uery packet"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Q")," uery packet has the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"TP <VERSION>/Q <QTYPE>/<LENGTH>\n\\n\n--------------- DATA ----------\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," The first line, is followed by a line break, and then the subsequent lines."),(0,r.kt)("h3",{id:"line-1-meta-frame"},"Line 1: Meta frame"),(0,r.kt)("p",null,"The first line is called the meta frame. The ",(0,r.kt)("inlineCode",{parentName:"p"},"<VALUES>")," and their corresponding meanings are as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"VERSION")),": The version of the protocol, in semver form, i.e ",(0,r.kt)("inlineCode",{parentName:"li"},"major.minor.patch"),".\nAn example can be: ",(0,r.kt)("inlineCode",{parentName:"li"},"0.1.0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"QTYPE")),": This is the type of query. It can have the following values:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET"),": For ",(0,r.kt)("inlineCode",{parentName:"li"},"GET")," operations"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SET"),": For ",(0,r.kt)("inlineCode",{parentName:"li"},"SET")," operations"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UPDATE"),": For ",(0,r.kt)("inlineCode",{parentName:"li"},"UDPATE")," operations"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DEL"),": For ",(0,r.kt)("inlineCode",{parentName:"li"},"DEL")," operations"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"LENGTH")),": The number of bytes that are being transmitted. This is useful for preallocating buffers for copying the data.")),(0,r.kt)("h4",{id:"example-meta-frame"},"Example meta frame"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"TP 0.1.0/Q GET/15\n")),(0,r.kt)("h3",{id:"line-2-line-break"},"Line 2: Line break"),(0,r.kt)("p",null,"This is a line break that separates the meta frame from the data frame."),(0,r.kt)("h3",{id:"line-3-data-frame"},"Line 3: Data frame"),(0,r.kt)("p",null,"The data frame doesn't have any defined format. It can be anything that can be transferred over TCP - that is, well, anything: letters, numbers or vaguely bytes."),(0,r.kt)("h2",{id:"the-result-packet"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"R"),"esult packet"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"R"),"esult packet has the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"TP <VERSION>/R <QTYPE>/<RESPONSECODE>/<LENGTH>\n\\n\n--------------------- DATA -------------------\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," The first line is followed by a line break, and then the subsequent lines."),(0,r.kt)("h3",{id:"line-1-meta-frame-1"},"Line 1: Meta frame"),(0,r.kt)("p",null,"Just like the ",(0,r.kt)("inlineCode",{parentName:"p"},"Q"),"uery packet, the first line is called the meta frame.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"<VALUES>")," and their corresponding meanings are as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"VERSION")),": The version of the protocol, in semver form, i.e ",(0,r.kt)("inlineCode",{parentName:"li"},"major.minor.patch"),".\nAn example can be: ",(0,r.kt)("inlineCode",{parentName:"li"},"0.1.0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"QTYPE")),": This is the type of query. It can have the following values:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"GET"),": For responses to ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," operations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"SET"),": For responses to ",(0,r.kt)("inlineCode",{parentName:"p"},"SET")," operations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE"),": For responses to ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE")," operations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"DEL"),": For response to ",(0,r.kt)("inlineCode",{parentName:"p"},"DEL")," operations"),(0,r.kt)("p",{parentName:"li"},"This must match with the initial query packet.")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"RESPONSECODE")),": This is the outcome of the query. It can have the following values:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"0: Okay"),(0,r.kt)("li",{parentName:"ul"},"1: Not found"),(0,r.kt)("li",{parentName:"ul"},"2: Method not allowed"),(0,r.kt)("li",{parentName:"ul"},"3: Server error"),(0,r.kt)("li",{parentName:"ul"},"4: Corrupt byte"),(0,r.kt)("li",{parentName:"ul"},"5: Protocol version mismatch"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"LENGTH")),": The number of bytes that are being transmitted. This is useful for preallocating buffers for copying the data.")),(0,r.kt)("h4",{id:"example-data-frame"},"Example data frame"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sayan is writing a protocol\n")),(0,r.kt)("h2",{id:"an-example-of-a-queryresult"},"An example of a query/result"),(0,r.kt)("p",null,"Let us assume a key called ",(0,r.kt)("inlineCode",{parentName:"p"},"sayan")," with a value of '17' exists on the database.\nOur client, uses ",(0,r.kt)("inlineCode",{parentName:"p"},"0.1.0")," version of tp and sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request for the key to our server which also uses version ",(0,r.kt)("inlineCode",{parentName:"p"},"0.1.0")," of tp."),(0,r.kt)("h3",{id:"the-query-packet"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"Q"),"uery packet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"TP 0.1.0/Q GET/5\n\\n\nsayan\n")),(0,r.kt)("h3",{id:"the-result-packet-1"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"R"),"esult packet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"TP 0.1.0/R GET/0/2\n\\n\n17\n")))}u.isMDXComponent=!0}}]);