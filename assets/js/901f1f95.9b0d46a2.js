"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8614],{9765:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var i=s(5893),r=s(1151);const t={id:"networking",title:"Networking"},d=void 0,l={id:"protocol/networking",title:"Networking",description:"The Skyhash protocol uses a very simple data exchange model.",source:"@site/docs/protocol/2.networking.md",sourceDirName:"protocol",slug:"/protocol/networking",permalink:"/protocol/networking",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"networking",title:"Networking"},sidebar:"docs",previous:{title:"Skyhash 2 \u2014 Protocol Overview",permalink:"/protocol/overview"},next:{title:"Errors",permalink:"/protocol/errors"}},o={},c=[{value:"Client",id:"client",level:2},{value:"Data types",id:"data-types",level:3},{value:"Queries",id:"queries",level:3},{value:"Server",id:"server",level:2},{value:"Data types",id:"data-types-1",level:3},{value:"Responses",id:"responses",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The Skyhash protocol uses a very simple data exchange model."}),"\n",(0,i.jsx)(n.admonition,{title:"This is for version 0.8.0!",type:"info",children:(0,i.jsx)(n.p,{children:"This information on networking only corresponds to Skytable 0.8.0 (Octave). If you're using a different version consider looking for the appropriate document."})}),"\n",(0,i.jsx)(n.p,{children:"We use three connection stages:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client handshake"}),": The client sends a handshake packet","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The handshake contains all necessary information to successfully establish a connection"}),"\n",(0,i.jsx)(n.li,{children:"The structure of the client handshake depends on the authentication plugin in use (since authentication data has to be exchanged before the connection can be established)"}),"\n",(0,i.jsxs)(n.li,{children:["For the ",(0,i.jsx)(n.code,{children:"pwd"})," plugin the client handshake looks like this:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"H00000<username length>\\n<password length>\\n<username><password>\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Server handshake"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Accepted:"})," If the server accepts the handshake information then it will respond with: ",(0,i.jsx)(n.code,{children:"H000"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rejected"}),": If the server rejects the handshake information then it will respond with ",(0,i.jsx)(n.code,{children:"H01<8-bit error code>"}),". You can find out what happened using ",(0,i.jsx)(n.a,{href:"errors",children:"the error code index"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data exchange"}),": This is where the client and server exchange data"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"How to communicate:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Open a TCP connection to the server"}),"\n",(0,i.jsx)(n.li,{children:"Do the handshake (as described above) and handle any errors"}),"\n",(0,i.jsx)(n.li,{children:"Encode queries as described below"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"client",children:"Client"}),"\n",(0,i.jsx)(n.h3,{id:"data-types",children:"Data types"}),"\n",(0,i.jsx)(n.p,{children:"The client side needs to send encoded data types to the server (in the form of parameters) so that the server can process them."}),"\n",(0,i.jsx)(n.p,{children:"Types:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Null: Encoded as ",(0,i.jsx)(n.code,{children:"0"})]}),"\n",(0,i.jsxs)(n.li,{children:["Bool: Encoded as ",(0,i.jsx)(n.code,{children:"1<0 or 1>\\n"})]}),"\n",(0,i.jsxs)(n.li,{children:["Unsigned integer: A 64-bit unsigned integer. Encoded as ",(0,i.jsx)(n.code,{children:"2<integer>\\n"})]}),"\n",(0,i.jsxs)(n.li,{children:["Signed integer: A 64-bit unsigned integer. Encoded as ",(0,i.jsx)(n.code,{children:"3<integer>\\n"})]}),"\n",(0,i.jsxs)(n.li,{children:["Float: A 64-bit (double precision) floating point value. Encoded as ",(0,i.jsx)(n.code,{children:"4<float>\\n"})]}),"\n",(0,i.jsxs)(n.li,{children:["Binary: A binary blob. Encoded as ",(0,i.jsx)(n.code,{children:"5<size>\\n<payload>"})]}),"\n",(0,i.jsxs)(n.li,{children:["String: An UTF-8 string. Encoded as ",(0,i.jsx)(n.code,{children:"6<size>\\n<payload>"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"queries",children:"Queries"}),"\n",(0,i.jsx)(n.p,{children:"A query has three sections:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The metaframe:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Contains metadata about the query"}),"\n",(0,i.jsxs)(n.li,{children:["Encoded as: ",(0,i.jsx)(n.code,{children:"<total packet size>\\n"})," (total size of the other two sections)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["The dataframe header: Encoded as ",(0,i.jsx)(n.code,{children:"<query body size>\\n"})]}),"\n",(0,i.jsxs)(n.li,{children:["The dataframe:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["First part contains the query body, encoded as: ",(0,i.jsx)(n.code,{children:"<query body>"})," (the query body is simply appended here)"]}),"\n",(0,i.jsxs)(n.li,{children:["Second part contains the payload body with all the parameters, encoded as: ",(0,i.jsx)(n.code,{children:"<parameter>\\n ..."})," (repeat for all parameters)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"server",children:"Server"}),"\n",(0,i.jsx)(n.h3,{id:"data-types-1",children:"Data types"}),"\n",(0,i.jsx)(n.p,{children:"The server will respond with different data types, depending on the context. These include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Null: Encoded as ",(0,i.jsx)(n.code,{children:"0"})]}),"\n",(0,i.jsxs)(n.li,{children:["Bool: encoded as ",(0,i.jsx)(n.code,{children:"1<0 or 1>\\n"})]}),"\n",(0,i.jsxs)(n.li,{children:["Unsigned integers:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"First byte: 2 -> 8-bit, 3 -> 16-bit, 4 -> 32-bit, 5 -> 64-bit"}),"\n",(0,i.jsxs)(n.li,{children:["Payload: ",(0,i.jsx)(n.code,{children:"<integer>\\n"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Signed integers:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"First byte: 6 -> 8-bit, 7 -> 16-bit, 8 -> 32-bit, 9 -> 64-bit"}),"\n",(0,i.jsxs)(n.li,{children:["Payload: ",(0,i.jsx)(n.code,{children:"<integer>\\n"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Simple collections:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"First byte: 10 -> binary, 11 -> string"}),"\n",(0,i.jsxs)(n.li,{children:["Payload: ",(0,i.jsx)(n.code,{children:"<size>\\n<body>"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Complex collections:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"First byte: 11 -> list"}),"\n",(0,i.jsxs)(n.li,{children:["Payload: ",(0,i.jsx)(n.code,{children:"<size>\\n<other server data types>"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"responses",children:"Responses"}),"\n",(0,i.jsxs)(n.p,{children:["The server can respond with any of the data types ",(0,i.jsx)(n.a,{href:"#data-types-1",children:"above"}),", or it can respond with a special response type like these:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error"}),": Encoded as ",(0,i.jsx)(n.code,{children:"0x10<16-bit error code>"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Row"}),": The server has returned a row. Encoded as ",(0,i.jsx)(n.code,{children:"0x11<column cnt>\\n<data type>"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Empty"}),": This indicates that the query ran successfully but nothing appropriate can be returned (like HTTP's 200 status). Encoded as ",(0,i.jsx)(n.code,{children:"0x12"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multirow"}),": The server has returned multiple rows. Encoded as ",(0,i.jsx)(n.code,{children:"0x13<row count>\\n<rows ...>"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>d});var i=s(7294);const r={},t=i.createContext(r);function d(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);