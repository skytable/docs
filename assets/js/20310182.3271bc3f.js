"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5840],{4525:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>h,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var t=n(5893),o=n(1151);const a={id:"snapshots",title:"Snapshots"},i=void 0,r={id:"snapshots",title:"Snapshots",description:"Skytable supports automated snapshots that can be used for periodic backups.",source:"@site/versioned_docs/version-0.7.4/10.snapshots.md",sourceDirName:".",slug:"/snapshots",permalink:"/0.7.4/snapshots",draft:!1,unlisted:!1,tags:[],version:"0.7.4",sidebarPosition:10,frontMatter:{id:"snapshots",title:"Snapshots"},sidebar:"docs",previous:{title:"Persistence",permalink:"/0.7.4/persistence"},next:{title:"TLS configuration",permalink:"/0.7.4/ssl"}},h={},d=[{value:"Enabling snapshots",id:"enabling-snapshots",level:2},{value:"Storage of snapshots",id:"storage-of-snapshots",level:2},{value:"How snapshots work",id:"how-snapshots-work",level:2},{value:"Methods of creating snapshots",id:"methods-of-creating-snapshots",level:2},{value:"Remote snapshots",id:"remote-snapshots",level:2}];function c(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["Skytable supports automated snapshots that can be used for periodic backups.\nSkytable's snapshotting system is dead simple and works in a similar way to ",(0,t.jsx)(s.a,{href:"persistence",children:"BGSAVE"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"enabling-snapshots",children:"Enabling snapshots"}),"\n",(0,t.jsxs)(s.p,{children:["Snapshots aren't enabled by default \u2014 you have to enable them by using the configuration file or ",(0,t.jsx)(s.a,{href:"config-cmd",children:"command line arguments"}),". To your existing configuration file, just add the following block:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-toml",children:"[snapshot]\nevery = 3600\natmost = 4\nfailsafe = true # optional\n"})}),"\n",(0,t.jsx)(s.p,{children:"Here's what these values mean:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"every"})," - Number of seconds to wait before creating another snapshot"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"atmost"})," - The maximum number of snapshots to keep"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"failsafe"})," - This indicates whether the database should stop accepting write operations if\nsnapshotting fails"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"storage-of-snapshots",children:"Storage of snapshots"}),"\n",(0,t.jsxs)(s.p,{children:["All the created snapshots are stored in a ",(0,t.jsx)(s.code,{children:"data/snaps"})," folder in the current directory.\nThe snapshot folders are named in the format: ",(0,t.jsx)(s.code,{children:"YYYYMMDD-HHMMSS"}),". On the other hand,\n",(0,t.jsx)(s.a,{href:"#remote-snapshots",children:"remote snapshots"})," are stored in the ",(0,t.jsx)(s.code,{children:"data/rsnap"})," folder."]}),"\n",(0,t.jsx)(s.h2,{id:"how-snapshots-work",children:"How snapshots work"}),"\n",(0,t.jsxs)(s.p,{children:["As mentioned earlier, snapshots work just like ",(0,t.jsx)(s.code,{children:"BGSAVE"}),". A task is spawned that starts encoding\n(and writing data) to a folder (which appears to be a copy of the ks folder); once all the data is successfully flushed to disk, the task exits."]}),"\n",(0,t.jsx)(s.h2,{id:"methods-of-creating-snapshots",children:"Methods of creating snapshots"}),"\n",(0,t.jsxs)(s.p,{children:["Snapshots can be created automatically by using the configuration file. However, if you want to create snapshots remotely, you can use the ",(0,t.jsxs)(s.a,{href:"actions/mksnap",children:[" ",(0,t.jsx)(s.code,{children:"MKSNAP"})," "]})," action. This will only\ncreate snapshots if it is enabled on the server-side, unless you use\n",(0,t.jsx)(s.a,{href:"#remote-snapshots",children:"truly remote snapshots"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"remote-snapshots",children:"Remote snapshots"}),"\n",(0,t.jsxs)(s.p,{children:["Irrespective of whether snapshots are enabled on the server side, you can use ",(0,t.jsx)(s.em,{children:"truly remote snapshots"}),".\nSuch snapshots can be created by using the ",(0,t.jsx)(s.a,{href:"actions/mksnap",children:(0,t.jsx)(s.code,{children:"MKSNAP"})})," action. To do this,\npass a second argument to ",(0,t.jsx)(s.code,{children:"MKSNAP"})," with the desired name of your snapshot. This will create\na snapshot in the ",(0,t.jsx)(s.code,{children:"data/rsnap"})," directory."]}),"\n",(0,t.jsx)(s.admonition,{type:"tip",children:(0,t.jsxs)(s.p,{children:["Since snapshots are intended for data backups \u2014 you can do a little ",(0,t.jsx)(s.em,{children:"trick"})," to make these\nbackups offsite-backups: mount a network file system or a different drive and create a folder\nfor storing your snapshots in it. Now, symlink the ",(0,t.jsx)(s.code,{children:"data/snaps"})," directory to your\n",(0,t.jsx)(s.em,{children:"remotely mounted directory"}),". You now have offsite backups!"]})})]})}function l(e={}){const{wrapper:s}={...(0,o.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>r,a:()=>i});var t=n(7294);const o={},a=t.createContext(o);function i(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);