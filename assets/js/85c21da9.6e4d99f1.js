"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1312],{5226:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var s=i(4848),t=i(8453);const a={id:"actions-overview",title:"Actions and Querying"},o=void 0,r={id:"actions-overview",title:"Actions and Querying",description:"Actions are exactly what they say &mdash; they do something! You can think of actions to be like",source:"@site/versioned_docs/version-0.7.5/3.actions-overview.md",sourceDirName:".",slug:"/actions-overview",permalink:"/0.7.5/actions-overview",draft:!1,unlisted:!1,tags:[],version:"0.7.5",sidebarPosition:3,frontMatter:{id:"actions-overview",title:"Actions and Querying"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/0.7.5/getting-started"},next:{title:"Containers",permalink:"/0.7.5/containers"}},l={},c=[{value:"Taking <em>action</em>",id:"taking-action",level:2},{value:"SET",id:"set",level:3},{value:"GET",id:"get",level:3},{value:"UPDATE",id:"update",level:3},{value:"DEL",id:"del",level:3},{value:"Types of queries",id:"types-of-queries",level:2},{value:"Simple queries",id:"simple-queries",level:3},{value:"Pipelined queries",id:"pipelined-queries",level:3},{value:"Batches",id:"batches",level:3}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Actions are exactly what they say \u2014 they do something! You can think of actions to be like\nshell commands: you run a command with arguments and you get some corresponding output.",(0,s.jsx)(n.br,{}),"\n","In this document we'll explore actions, or what you may\ncall queries. We'll also explore the different kinds of queries that you can use with Skytable."]}),"\n",(0,s.jsxs)(n.p,{children:["Remember the ",(0,s.jsx)(n.code,{children:"HEYA"})," you ran in the earlier document? Yup, that's an action. All kind of ",(0,s.jsx)(n.em,{children:"quering"})," in Skytable is done through actions. Actions are classified into two kinds:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"DDL (Data definition language) Actions: These actions enable us to interact with the structures\nthat store our data"}),"\n",(0,s.jsx)(n.li,{children:"DML (Data manipulation language) Actions: These actions enable us to access and manipulate the data stored in our database"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"taking-action",children:["Taking ",(0,s.jsx)(n.em,{children:"action"})]}),"\n",(0,s.jsxs)(n.p,{children:["If you're coming from a SQL background, you might be used to the ",(0,s.jsx)(n.em,{children:"DML"})," way of things. That's right, DML actions are ",(0,s.jsx)(n.em,{children:"similar"}),".\nLet us try out a few basic DML actions (don't worry \u2014 you'll learn about DDL in the next few documents)."]}),"\n",(0,s.jsx)(n.h3,{id:"set",children:"SET"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"SET"})," action lets us assign a key to a value (in a key/value table). For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SET x 100\n"})}),"\n",(0,s.jsxs)(n.p,{children:["will assign the key ",(0,s.jsx)(n.code,{children:"x"})," to ",(0,s.jsx)(n.code,{children:"100"}),". But how do we get it?"]}),"\n",(0,s.jsx)(n.h3,{id:"get",children:"GET"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"GET"})," action lets us fetch keys. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"GET x\n"})}),"\n",(0,s.jsxs)(n.p,{children:["will return the ",(0,s.jsx)(n.code,{children:"100"})," that we set in the last step."]}),"\n",(0,s.jsx)(n.h3,{id:"update",children:"UPDATE"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"UPDATE"})," action lets us update the values of keys. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"UPDATE x 200\n"})}),"\n",(0,s.jsxs)(n.p,{children:["will update the value of ",(0,s.jsx)(n.code,{children:"x"})," to ",(0,s.jsx)(n.code,{children:"200"})]}),"\n",(0,s.jsx)(n.h3,{id:"del",children:"DEL"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"DEL"})," action lets us remove keys from the database. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"DEL x\n"})}),"\n",(0,s.jsxs)(n.p,{children:["will remove the key ",(0,s.jsx)(n.code,{children:"x"})," from the database."]}),"\n",(0,s.jsxs)(n.p,{children:["Didn't we just do a ",(0,s.jsx)(n.strong,{children:"C"}),"reate-",(0,s.jsx)(n.strong,{children:"R"}),"ead-",(0,s.jsx)(n.strong,{children:"U"}),"pdate-",(0,s.jsx)(n.strong,{children:"D"}),"elete? The infamous CRUD! Now that you know\nsome basic actions, you can take a look at the ",(0,s.jsx)(n.a,{href:"all-actions",children:"full index of actions"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"types-of-queries",children:"Types of queries"}),"\n",(0,s.jsx)(n.h3,{id:"simple-queries",children:"Simple queries"}),"\n",(0,s.jsx)(n.p,{children:"Simple queries are, well simple! You run a single action and there \u2014 you ran a simple query."}),"\n",(0,s.jsx)(n.h3,{id:"pipelined-queries",children:"Pipelined queries"}),"\n",(0,s.jsx)(n.p,{children:"Pipelined queries or simply pipelines enable clients to send multiple queries to the database server\nat once. Responses for every query is returned in the order they query was sent. For example if you sent four queries like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"heya once\nheya twice\nheya thrice\nheya finally\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then you'd get the echos in the following order:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'"once"\n"twice"\n"thrice"\n"finally"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Hence, the responses are returned in the order queries were issued."}),"\n",(0,s.jsx)(n.admonition,{title:"Limitations",type:"note",children:(0,s.jsx)(n.p,{children:"Pipelines provide no transactional guarantees and hence shouldn't be relied on for the same."})}),"\n",(0,s.jsx)(n.h3,{id:"batches",children:"Batches"}),"\n",(0,s.jsxs)(n.p,{children:["Batches are currently in the ",(0,s.jsx)(n.em,{children:"decision phase"})," but aim to provide a way to overcome the limitations imposed by pipelines, hence providing stronger\nguarantees. If you have any ideas, drop an ",(0,s.jsx)(n.a,{href:"https://github.com/skytable/skytable/issues/new",children:"issue here"})," and we'll be happy to consider it!"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var s=i(6540);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);